/* BasicParser.java */
/* Generated By:JavaCC: Do not edit this line. BasicParser.java */
package de.haupz.basicode.parser;

import java.util.ArrayList;
import java.util.List;

import de.haupz.basicode.ast.*;

public class BasicParser implements BasicParserConstants {
    List<Object> dataList = new ArrayList<>();

// Parser.

//
// basic structures
//
  final public 
ProgramNode program() throws ParseException {List<LineNode> lines = new ArrayList<>();
    LineNode l;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      l = line();
lines.add(l);
    }
{if ("" != null) return new ProgramNode(lines, dataList);}
    throw new Error("Missing return statement in function");
}

  final public LineNode line() throws ParseException {List<StatementNode> statements = new ArrayList<>();
    int num;
    StatementNode st;
    num = lineNumber();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATA:{
      st = data_line();
statements.add(st);
      break;
      }
    case DEF:
    case DIM:
    case END:
    case FOR:
    case GOSUB:
    case GOTO:
    case IF:
    case INPUT:
    case LET:
    case NEXT:
    case ON:
    case PRINT:
    case READ:
    case REM:
    case RESTORE:
    case RETURN:
    case RUN:
    case STOP:
    case IDENTIFIER:{
      st = statement();
statements.add(st);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 53:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(53);
        st = statement();
statements.add(st);
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EOL:{
      jj_consume_token(EOL);
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new LineNode(num, statements);}
    throw new Error("Missing return statement in function");
}

  final public int lineNumber() throws ParseException {Token n;
    n = jj_consume_token(NUMBER);
{if ("" != null) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
}

//
// statements
//
  final public 
StatementNode statement() throws ParseException {Token t;
    ExpressionNode e;
    StatementNode s;
    int n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REM:{
      t = jj_consume_token(REM);
{if ("" != null) return new RemNode(t.image);}
      break;
      }
    case LET:
    case IDENTIFIER:{
      s = assignment();
{if ("" != null) return s;}
      break;
      }
    case PRINT:{
      s = print_statement();
{if ("" != null) return s;}
      break;
      }
    case GOTO:{
      jj_consume_token(GOTO);
      n = lineNumber();
{if ("" != null) return new GotoNode(n);}
      break;
      }
    case GOSUB:{
      jj_consume_token(GOSUB);
      n = lineNumber();
{if ("" != null) return new GosubNode(n);}
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
{if ("" != null) return new ReturnNode();}
      break;
      }
    case ON:{
      s = dependent_jump();
{if ("" != null) return s;}
      break;
      }
    case DIM:{
      s = dim_statement();
{if ("" != null) return s;}
      break;
      }
    case FOR:{
      s = for_statement();
{if ("" != null) return s;}
      break;
      }
    case NEXT:{
      jj_consume_token(NEXT);
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new NextNode(t.image);}
      break;
      }
    case IF:{
      s = if_statement();
{if ("" != null) return s;}
      break;
      }
    case READ:{
      s = read_statement();
{if ("" != null) return s;}
      break;
      }
    case RESTORE:{
      jj_consume_token(RESTORE);
{if ("" != null) return new RestoreNode();}
      break;
      }
    case END:
    case STOP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case END:{
        jj_consume_token(END);
        break;
        }
      case STOP:{
        jj_consume_token(STOP);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new EndNode();}
      break;
      }
    case INPUT:{
      jj_consume_token(INPUT);
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new InputNode(t.image);}
      break;
      }
    case RUN:{
      jj_consume_token(RUN);
{if ("" != null) return new RunNode();}
      break;
      }
    case DEF:{
      s = def_fn();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public StatementNode data_line() throws ParseException {Object l;
    List<Object> items = new ArrayList<>();
    jj_consume_token(DATA);
    l = data_literal();
items.add(l);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(54);
      l = data_literal();
items.add(l);
    }
dataList.addAll(items);
        {if ("" != null) return new DataNode(items);}
    throw new Error("Missing return statement in function");
}

  final public Object data_literal() throws ParseException {int sgn = 1;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case FLOAT:
    case 55:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
sgn = -1;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        t = jj_consume_token(NUMBER);
{if ("" != null) return sgn * Integer.parseInt(t.image);}
        break;
        }
      case FLOAT:{
        t = jj_consume_token(FLOAT);
{if ("" != null) return sgn * Double.parseDouble(t.image);}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return t.image.substring(1, t.image.length() - 1);}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public StatementNode assignment() throws ParseException {LetNode.LHS l;
    ExpressionNode e = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      jj_consume_token(LET);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    l = lhs();
    jj_consume_token(56);
    e = expression();
{if ("" != null) return new LetNode(l, e);}
    throw new Error("Missing return statement in function");
}

  final public LetNode.LHS lhs() throws ParseException {Token t;
    ExpressionNode e = null;
    ExpressionNode f = null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 57:{
      jj_consume_token(57);
      e = expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        jj_consume_token(54);
        f = expression();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(58);
{if ("" != null) return new LetNode.Array(t.image, e, f);}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return new LetNode.Variable(t.image);}
    throw new Error("Missing return statement in function");
}

  final public StatementNode print_statement() throws ParseException {Token t;
    PrintNode.Element elem;
    List<PrintNode.Element> elements = new ArrayList<>();
    jj_consume_token(PRINT);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case INTEGER:
    case FLOAT:
    case STRING:
    case ABS:
    case ASC:
    case ATN:
    case CHRS:
    case COS:
    case FN:
    case INT:
    case LEFTS:
    case MIDS:
    case NOT:
    case RIGHTS:
    case SGN:
    case SIN:
    case SQR:
    case TAB:
    case TAN:
    case VAL:
    case IDENTIFIER:
    case FNIDENTIFIER:
    case 55:
    case 57:{
      elem = print_element();
elements.add(elem);
      label_4:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 54:{
          t = jj_consume_token(54);
          break;
          }
        case 59:{
          t = jj_consume_token(59);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
elements.add(new PrintNode.Element(PrintNode.ElementType.SEPARATOR, t.image));
        elem = print_element();
elements.add(elem);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 59:{
        t = jj_consume_token(59);
elements.add(new PrintNode.Element(PrintNode.ElementType.SEPARATOR, t.image));
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
{if ("" != null) return new PrintNode(elements);}
    throw new Error("Missing return statement in function");
}

  final public PrintNode.Element print_element() throws ParseException {ExpressionNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case INTEGER:
    case FLOAT:
    case STRING:
    case ABS:
    case ASC:
    case ATN:
    case CHRS:
    case COS:
    case FN:
    case INT:
    case LEFTS:
    case MIDS:
    case NOT:
    case RIGHTS:
    case SGN:
    case SIN:
    case SQR:
    case TAN:
    case VAL:
    case IDENTIFIER:
    case FNIDENTIFIER:
    case 55:
    case 57:{
      e = expression();
{if ("" != null) return new PrintNode.Element(PrintNode.ElementType.EXPRESSION, e);}
      break;
      }
    case TAB:{
      jj_consume_token(TAB);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new PrintNode.Element(PrintNode.ElementType.TAB, e);}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public StatementNode dim_statement() throws ParseException {DimCreateNode d;
    List<DimCreateNode> dims = new ArrayList<>();
    jj_consume_token(DIM);
    d = one_dim();
dims.add(d);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      jj_consume_token(54);
      d = one_dim();
dims.add(d);
    }
{if ("" != null) return new DimNode(dims);}
    throw new Error("Missing return statement in function");
}

  final public DimCreateNode one_dim() throws ParseException {Token t;
    ExpressionNode d1 = null;
    ExpressionNode d2 = null;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(57);
    d1 = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 54:{
      jj_consume_token(54);
      d2 = expression();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(58);
{if ("" != null) return new DimCreateNode(t.image, d1, d2);}
    throw new Error("Missing return statement in function");
}

  final public StatementNode dependent_jump() throws ParseException {ExpressionNode e;
    boolean isGosub = false;
    List<Integer> targets = new ArrayList<>();
    int n;
    jj_consume_token(ON);
    e = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GOTO:{
      jj_consume_token(GOTO);
      break;
      }
    case GOSUB:{
      jj_consume_token(GOSUB);
isGosub = true;
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n = lineNumber();
targets.add(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      jj_consume_token(54);
      n = lineNumber();
targets.add(n);
    }
{if ("" != null) return isGosub ? new OnGosubNode(e, targets) : new OnGotoNode(e, targets);}
    throw new Error("Missing return statement in function");
}

  final public StatementNode for_statement() throws ParseException {Token t;
    ExpressionNode e;
    ExpressionNode f;
    ExpressionNode g = null;
    jj_consume_token(FOR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(56);
    e = expression();
    jj_consume_token(TO);
    f = expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STEP:{
      jj_consume_token(STEP);
      g = expression();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
{if ("" != null) return new ForNode(t.image, e, f, g);}
    throw new Error("Missing return statement in function");
}

  final public StatementNode if_statement() throws ParseException {ExpressionNode e;
    int l = -1;
    StatementNode s;
    List<StatementNode> thenStatements = new ArrayList<>();
    jj_consume_token(IF);
    e = expression();
    jj_consume_token(THEN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      l = lineNumber();
thenStatements.add(new GotoNode(l));
      break;
      }
    case DEF:
    case DIM:
    case END:
    case FOR:
    case GOSUB:
    case GOTO:
    case IF:
    case INPUT:
    case LET:
    case NEXT:
    case ON:
    case PRINT:
    case READ:
    case REM:
    case RESTORE:
    case RETURN:
    case RUN:
    case STOP:
    case IDENTIFIER:{
      s = statement();
thenStatements.add(s);
      label_7:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(53);
        s = statement();
thenStatements.add(s);
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new IfThenNode(e, thenStatements);}
    throw new Error("Missing return statement in function");
}

  final public StatementNode read_statement() throws ParseException {LetNode.LHS l;
    List<LetNode.LHS> lhss = new ArrayList<>();
    jj_consume_token(READ);
    l = lhs();
lhss.add(l);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        ;
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        break label_8;
      }
      jj_consume_token(54);
      l = lhs();
lhss.add(l);
    }
{if ("" != null) return new ReadNode(lhss);}
    throw new Error("Missing return statement in function");
}

  final public StatementNode def_fn() throws ParseException {String f;
    Token u;
    ExpressionNode e;
    jj_consume_token(DEF);
    f = fn_id();
    jj_consume_token(57);
    u = jj_consume_token(IDENTIFIER);
    jj_consume_token(58);
    jj_consume_token(56);
    e = expression();
{if ("" != null) return new DefFnNode(f, u.image, e);}
    throw new Error("Missing return statement in function");
}

  final public String fn_id() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FN:{
      jj_consume_token(FN);
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t.image;}
      break;
      }
    case FNIDENTIFIER:{
      t = jj_consume_token(FNIDENTIFIER);
{if ("" != null) return t.image.substring(2, t.image.length());}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

//
// expressions
//
  final public 
ExpressionNode expression() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    e = and_expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_9;
      }
      jj_consume_token(OR);
      f = and_expression();
e = new OrNode(e, f);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode and_expression() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    e = equality_expression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_10;
      }
      jj_consume_token(AND);
      f = equality_expression();
e = new AndNode(e, f);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode equality_expression() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    e = relational_expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 56:
    case 60:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 56:{
        jj_consume_token(56);
        f = relational_expression();
{if ("" != null) return new EqNode(e, f);}
        break;
        }
      case 60:{
        jj_consume_token(60);
        f = relational_expression();
{if ("" != null) return new NeqNode(e, f);}
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode relational_expression() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    e = additive_expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 61:
    case 62:
    case 63:
    case 64:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 61:{
        jj_consume_token(61);
        f = additive_expression();
{if ("" != null) return new LtNode(e, f);}
        break;
        }
      case 62:{
        jj_consume_token(62);
        f = additive_expression();
{if ("" != null) return new LeqNode(e, f);}
        break;
        }
      case 63:{
        jj_consume_token(63);
        f = additive_expression();
{if ("" != null) return new GtNode(e, f);}
        break;
        }
      case 64:{
        jj_consume_token(64);
        f = additive_expression();
{if ("" != null) return new GeqNode(e, f);}
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode additive_expression() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    e = multiplicative_expression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:
      case 65:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 65:{
        jj_consume_token(65);
        f = multiplicative_expression();
e = new AddNode(e, f);
        break;
        }
      case 55:{
        jj_consume_token(55);
        f = multiplicative_expression();
e = new SubtractNode(e, f);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode multiplicative_expression() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    e = power_expression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 66:
      case 67:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 66:{
        jj_consume_token(66);
        f = power_expression();
e = new MultiplyNode(e, f);
        break;
        }
      case 67:{
        jj_consume_token(67);
        f = power_expression();
e = new DivideNode(e, f);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode power_expression() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    e = unary_expression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 68:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
      jj_consume_token(68);
      f = unary_expression();
e = new PowerNode(e, f);
    }
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode unary_expression() throws ParseException {ExpressionNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:{
      jj_consume_token(55);
      e = unary_expression();
{if ("" != null) return new NegateNode(e);}
      break;
      }
    case NUMBER:
    case INTEGER:
    case FLOAT:
    case STRING:
    case ABS:
    case ASC:
    case ATN:
    case CHRS:
    case COS:
    case FN:
    case INT:
    case LEFTS:
    case MIDS:
    case NOT:
    case RIGHTS:
    case SGN:
    case SIN:
    case SQR:
    case TAN:
    case VAL:
    case IDENTIFIER:
    case FNIDENTIFIER:
    case 57:{
      e = unary_expression_not_plus_minus();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode unary_expression_not_plus_minus() throws ParseException {ExpressionNode e;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      e = unary_expression();
{if ("" != null) return new NotNode(e);}
      break;
      }
    case NUMBER:
    case INTEGER:
    case FLOAT:
    case STRING:
    case ABS:
    case ASC:
    case ATN:
    case CHRS:
    case COS:
    case FN:
    case INT:
    case LEFTS:
    case MIDS:
    case RIGHTS:
    case SGN:
    case SIN:
    case SQR:
    case TAN:
    case VAL:
    case IDENTIFIER:
    case FNIDENTIFIER:
    case 57:{
      e = primary_expression();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode primary_expression() throws ParseException {ExpressionNode e;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case INTEGER:
    case FLOAT:
    case STRING:{
      e = literal();
{if ("" != null) return e;}
      break;
      }
    case 57:{
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return e;}
      break;
      }
    case ABS:
    case ASC:
    case ATN:
    case CHRS:
    case COS:
    case INT:
    case LEFTS:
    case MIDS:
    case RIGHTS:
    case SGN:
    case SIN:
    case SQR:
    case TAN:
    case VAL:{
      e = builtin_call();
{if ("" != null) return e;}
      break;
      }
    case FN:
    case FNIDENTIFIER:{
      e = fn_call();
{if ("" != null) return e;}
      break;
      }
    case IDENTIFIER:{
      e = varOrDimAccess();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode literal() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case INTEGER:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        t = jj_consume_token(NUMBER);
        break;
        }
      case INTEGER:{
        t = jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return new IntegerNode(Integer.parseInt(t.image));}
      break;
      }
    case FLOAT:{
      t = jj_consume_token(FLOAT);
{if ("" != null) return new DoubleNode(Double.parseDouble(t.image));}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return new StringNode(t.image.substring(1, t.image.length() - 1));}
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode varOrDimAccess() throws ParseException {Token t;
    ExpressionNode e = null;
    ExpressionNode f = null;
    t = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 57:{
      jj_consume_token(57);
      e = expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 54:{
        jj_consume_token(54);
        f = expression();
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(58);
{if ("" != null) return new DimAccessNode(t.image, e, f);}
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
{if ("" != null) return new VarNode(t.image);}
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode builtin_call() throws ParseException {ExpressionNode e;
    ExpressionNode f;
    ExpressionNode g;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABS:{
      jj_consume_token(ABS);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new AbsNode(e);}
      break;
      }
    case ASC:{
      jj_consume_token(ASC);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new AscNode(e);}
      break;
      }
    case ATN:{
      jj_consume_token(ATN);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new AtnNode(e);}
      break;
      }
    case CHRS:{
      jj_consume_token(CHRS);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new ChrsNode(e);}
      break;
      }
    case COS:{
      jj_consume_token(COS);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new CosNode(e);}
      break;
      }
    case INT:{
      jj_consume_token(INT);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new IntNode(e);}
      break;
      }
    case LEFTS:{
      jj_consume_token(LEFTS);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(54);
      f = expression();
      jj_consume_token(58);
{if ("" != null) return new LeftsNode(e, f);}
      break;
      }
    case MIDS:{
      jj_consume_token(MIDS);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(54);
      f = expression();
      jj_consume_token(54);
      g = expression();
      jj_consume_token(58);
{if ("" != null) return new MidsNode(e, f, g);}
      break;
      }
    case RIGHTS:{
      jj_consume_token(RIGHTS);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(54);
      f = expression();
      jj_consume_token(58);
{if ("" != null) return new RightsNode(e, f);}
      break;
      }
    case SGN:{
      jj_consume_token(SGN);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new SgnNode(e);}
      break;
      }
    case SIN:{
      jj_consume_token(SIN);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new SinNode(e);}
      break;
      }
    case SQR:{
      jj_consume_token(SQR);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new SqrNode(e);}
      break;
      }
    case TAN:{
      jj_consume_token(TAN);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new TanNode(e);}
      break;
      }
    case VAL:{
      jj_consume_token(VAL);
      jj_consume_token(57);
      e = expression();
      jj_consume_token(58);
{if ("" != null) return new ValNode(e);}
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ExpressionNode fn_call() throws ParseException {String f;
    ExpressionNode e;
    f = fn_id();
    jj_consume_token(57);
    e = expression();
    jj_consume_token(58);
{if ("" != null) return new FnCallNode(f, e);}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_multiplicative_expression_374_5_49()
 {
    if (jj_3R_power_expression_388_5_50()) return true;
    return false;
  }

  private boolean jj_3R_print_statement_182_5_37()
 {
    if (jj_scan_token(PRINT)) return true;
    return false;
  }

  private boolean jj_3R_lhs_170_5_45()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_additive_expression_360_5_48()
 {
    if (jj_3R_multiplicative_expression_374_5_49()) return true;
    return false;
  }

  private boolean jj_3R_assignment_160_5_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) jj_scanpos = xsp;
    if (jj_3R_lhs_170_5_45()) return true;
    return false;
  }

  private boolean jj_3R_relational_expression_344_5_47()
 {
    if (jj_3R_additive_expression_360_5_48()) return true;
    return false;
  }

  private boolean jj_3R_equality_expression_330_5_46()
 {
    if (jj_3R_relational_expression_344_5_47()) return true;
    return false;
  }

  private boolean jj_3R_and_expression_320_5_44()
 {
    if (jj_3R_equality_expression_330_5_46()) return true;
    return false;
  }

  private boolean jj_3R_statement_124_5_34()
 {
    if (jj_3R_def_fn_286_5_43()) return true;
    return false;
  }

  private boolean jj_3R_statement_123_5_33()
 {
    if (jj_scan_token(RUN)) return true;
    return false;
  }

  private boolean jj_3R_statement_122_5_32()
 {
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(53)) return true;
    if (jj_3R_statement_108_5_15()) return true;
    return false;
  }

  private boolean jj_3R_statement_121_5_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    return false;
  }

  private boolean jj_3R_statement_120_5_30()
 {
    if (jj_scan_token(RESTORE)) return true;
    return false;
  }

  private boolean jj_3R_statement_119_5_29()
 {
    if (jj_3R_read_statement_275_5_42()) return true;
    return false;
  }

  private boolean jj_3R_expression_310_5_35()
 {
    if (jj_3R_and_expression_320_5_44()) return true;
    return false;
  }

  private boolean jj_3R_statement_118_5_28()
 {
    if (jj_3R_if_statement_261_5_41()) return true;
    return false;
  }

  private boolean jj_3R_statement_117_5_27()
 {
    if (jj_scan_token(NEXT)) return true;
    return false;
  }

  private boolean jj_3R_statement_116_5_26()
 {
    if (jj_3R_for_statement_249_5_40()) return true;
    return false;
  }

  private boolean jj_3R_statement_115_5_25()
 {
    if (jj_3R_dim_statement_212_5_39()) return true;
    return false;
  }

  private boolean jj_3R_statement_114_5_24()
 {
    if (jj_3R_dependent_jump_235_5_38()) return true;
    return false;
  }

  private boolean jj_3R_statement_113_5_23()
 {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_statement_112_5_22()
 {
    if (jj_scan_token(GOSUB)) return true;
    return false;
  }

  private boolean jj_3R_statement_111_5_21()
 {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  private boolean jj_3R_statement_110_5_20()
 {
    if (jj_3R_print_statement_182_5_37()) return true;
    return false;
  }

  private boolean jj_3R_fn_id_296_9_86()
 {
    if (jj_scan_token(FNIDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_statement_109_5_19()
 {
    if (jj_3R_assignment_160_5_36()) return true;
    return false;
  }

  private boolean jj_3R_fn_id_295_9_85()
 {
    if (jj_scan_token(FN)) return true;
    return false;
  }

  private boolean jj_3R_statement_108_5_18()
 {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_statement_108_5_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_statement_108_5_18()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_109_5_19()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_110_5_20()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_111_5_21()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_112_5_22()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_113_5_23()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_114_5_24()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_115_5_25()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_116_5_26()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_117_5_27()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_118_5_28()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_119_5_29()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_120_5_30()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_121_5_31()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_122_5_32()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_123_5_33()) {
    jj_scanpos = xsp;
    if (jj_3R_statement_124_5_34()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_fn_id_294_5_84()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_fn_id_295_9_85()) {
    jj_scanpos = xsp;
    if (jj_3R_fn_id_296_9_86()) return true;
    }
    return false;
  }

  private boolean jj_3R_def_fn_286_5_43()
 {
    if (jj_scan_token(DEF)) return true;
    return false;
  }

  private boolean jj_3R_fn_call_476_5_65()
 {
    if (jj_3R_fn_id_294_5_84()) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_467_5_83()
 {
    if (jj_scan_token(VAL)) return true;
    return false;
  }

  private boolean jj_3R_read_statement_275_5_42()
 {
    if (jj_scan_token(READ)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_466_5_82()
 {
    if (jj_scan_token(TAN)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_465_5_81()
 {
    if (jj_scan_token(SQR)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_464_5_80()
 {
    if (jj_scan_token(SIN)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_463_5_79()
 {
    if (jj_scan_token(SGN)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_462_5_78()
 {
    if (jj_scan_token(RIGHTS)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_461_5_77()
 {
    if (jj_scan_token(MIDS)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_460_5_76()
 {
    if (jj_scan_token(LEFTS)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_459_5_75()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_458_5_74()
 {
    if (jj_scan_token(COS)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_457_5_73()
 {
    if (jj_scan_token(CHRS)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_456_5_72()
 {
    if (jj_scan_token(ATN)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_455_5_71()
 {
    if (jj_scan_token(ASC)) return true;
    return false;
  }

  private boolean jj_3R_builtin_call_454_5_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_builtin_call_454_5_70()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_455_5_71()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_456_5_72()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_457_5_73()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_458_5_74()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_459_5_75()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_460_5_76()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_461_5_77()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_462_5_78()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_463_5_79()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_464_5_80()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_465_5_81()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_466_5_82()) {
    jj_scanpos = xsp;
    if (jj_3R_builtin_call_467_5_83()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_builtin_call_454_5_70()
 {
    if (jj_scan_token(ABS)) return true;
    return false;
  }

  private boolean jj_3R_if_statement_261_5_41()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_varOrDimAccess_443_5_66()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_for_statement_249_5_40()
 {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_literal_433_5_69()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_literal_432_5_68()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_literal_431_5_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_literal_431_5_67()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_432_5_68()) {
    jj_scanpos = xsp;
    if (jj_3R_literal_433_5_69()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_literal_431_5_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    }
    return false;
  }

  private boolean jj_3R_dependent_jump_235_5_38()
 {
    if (jj_scan_token(ON)) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_423_5_62()
 {
    if (jj_3R_varOrDimAccess_443_5_66()) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_422_5_61()
 {
    if (jj_3R_fn_call_476_5_65()) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_421_5_60()
 {
    if (jj_3R_builtin_call_454_5_64()) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_420_5_59()
 {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_419_5_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primary_expression_419_5_58()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_expression_420_5_59()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_expression_421_5_60()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_expression_422_5_61()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_expression_423_5_62()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_primary_expression_419_5_58()
 {
    if (jj_3R_literal_431_5_63()) return true;
    return false;
  }

  private boolean jj_3R_unary_expression_not_plus_minus_410_5_56()
 {
    if (jj_3R_primary_expression_419_5_57()) return true;
    return false;
  }

  private boolean jj_3R_unary_expression_not_plus_minus_409_5_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unary_expression_not_plus_minus_409_5_55()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_expression_not_plus_minus_410_5_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_unary_expression_not_plus_minus_409_5_55()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_dim_statement_212_5_39()
 {
    if (jj_scan_token(DIM)) return true;
    return false;
  }

  private boolean jj_3R_unary_expression_401_5_53()
 {
    if (jj_3R_unary_expression_not_plus_minus_409_5_54()) return true;
    return false;
  }

  private boolean jj_3R_unary_expression_400_5_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_unary_expression_400_5_52()) {
    jj_scanpos = xsp;
    if (jj_3R_unary_expression_401_5_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_unary_expression_400_5_52()
 {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_print_element_203_5_17()
 {
    if (jj_scan_token(TAB)) return true;
    return false;
  }

  private boolean jj_3R_print_element_202_5_16()
 {
    if (jj_3R_expression_310_5_35()) return true;
    return false;
  }

  private boolean jj_3R_print_element_202_5_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_print_element_202_5_16()) {
    jj_scanpos = xsp;
    if (jj_3R_print_element_203_5_17()) return true;
    }
    return false;
  }

  private boolean jj_3R_power_expression_388_5_50()
 {
    if (jj_3R_unary_expression_400_5_51()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    if (jj_3R_print_element_202_5_14()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BasicParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8,0x0,0x49bbc000,0x5,0x20000,0x49bb8000,0x0,0x0,0x28,0xa8,0x8000000,0x0,0x0,0x0,0x0,0xa2443db8,0xa2443db8,0x0,0x0,0x300000,0x0,0x0,0x49bb8008,0x0,0x40000,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa2443db8,0xa2443db8,0x22443db8,0x18,0xb8,0x0,0x0,0x22403d00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x200000,0x8217d,0x0,0x2000,0x8217d,0x400000,0x800000,0x0,0x800000,0x0,0x400000,0x2000000,0x8400000,0x8000000,0x29cce80,0x29cce80,0x400000,0x400000,0x0,0x400000,0x1000,0x8217d,0x400000,0x100000,0x2,0x0,0x11000000,0x11000000,0xe0000000,0xe0000000,0x800000,0x800000,0x0,0x0,0x0,0x29c8e80,0x21c8e80,0x21c8e80,0x0,0x0,0x400000,0x2000000,0x48e80,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x2,0x2,0xc,0xc,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BasicParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BasicParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BasicParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BasicParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BasicParser(BasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BasicParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[69];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 44; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 69; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
